/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package javalabdetailed;

import DB.DBManager;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.HorizontalAlignment;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import java.io.FileOutputStream;
import java.net.URL;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.sql.*;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;


/**
 *
 * @author mudasser
 */
public class ReportsManager {

    public static void generateStockReport(JTable table) {
        String dest = "reports/stock_report_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH-mm")) + ".pdf";
        try (PdfWriter writer = new PdfWriter(new FileOutputStream(dest)); PdfDocument pdf = new PdfDocument(writer); Document document = new Document(pdf, PageSize.A4.rotate());) {
            Table topTable = new Table(UnitValue.createPercentArray(new float[]{1, 3}))
                    .useAllAvailableWidth();
            URL logoUrl = GUI.class.getResource("/Media/logo.png");
            if (logoUrl != null) {
                ImageData logoData = ImageDataFactory.create(logoUrl);
                com.itextpdf.layout.element.Image logo
                        = new com.itextpdf.layout.element.Image(logoData)
                                .scaleToFit(200, 100)
                                .setHorizontalAlignment(HorizontalAlignment.LEFT);
                topTable.addCell(new Cell().add(logo).setBorder(Border.NO_BORDER));
            } else {
                topTable.addCell(new Cell().add(new Paragraph("")).setBorder(Border.NO_BORDER));
            }

            String dateStr = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));
            Paragraph title = new Paragraph("Stock Report")
                    .setFontSize(20)
                    .setBold()
                    .setTextAlignment(TextAlignment.RIGHT);

            Paragraph details = new Paragraph("Date: " + dateStr + "\nGenerated by: Admin")
                    .setFontSize(10)
                    .setTextAlignment(TextAlignment.RIGHT);

            Cell rightCell = new Cell()
                    .add(title)
                    .add(details)
                    .setBorder(Border.NO_BORDER);

            topTable.addCell(rightCell);
            document.add(topTable);
            document.add(new Paragraph("\n"));
            TableModel model = table.getModel();
            Table pdfTable = new Table(model.getColumnCount()).useAllAvailableWidth();

            for (int i = 0; i < model.getColumnCount(); i++) {
                pdfTable.addHeaderCell(new Cell().add(new Paragraph(model.getColumnName(i)).setBold()));
            }

            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    Object value = model.getValueAt(row, col);
                    pdfTable.addCell(new Cell().add(new Paragraph(value != null ? value.toString() : "")));
                }
            }

            document.add(pdfTable);
            System.out.println("PDF generated at: " + dest);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void generateStockReportCSV(JTable table) {
        String dest = "reports/stock_report_"
                + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH-mm"))
                + ".csv";

        try (PrintWriter writer = new PrintWriter(new FileWriter(dest))) {
            String dateStr = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));

            writer.println("Stock Report");
            writer.println("Generated by,Admin");
            writer.println("Date," + dateStr);
            writer.println();

            TableModel model = table.getModel();

            for (int i = 0; i < model.getColumnCount(); i++) {
                writer.print(model.getColumnName(i));
                if (i < model.getColumnCount() - 1) {
                    writer.print(",");
                }
            }
            writer.println();

            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    Object value = model.getValueAt(row, col);
                    String text = value != null ? value.toString().replace(",", " ") : "";
                    writer.print(text);
                    if (col < model.getColumnCount() - 1) {
                        writer.print(",");
                    }
                }
                writer.println();
            }

            System.out.println("CSV generated at: " + dest);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static Map<String, ArrayList<ProductSupplierPair>> fetchMonthlyProductSupplierPairs() {
        Map<String, ArrayList<ProductSupplierPair>> monthlyMap = new LinkedHashMap<>();

        String query = """
            SELECT 
                p.id AS product_id,
                p.name AS product_name,
                p.category,
                p.quantity,
                p.price,
                p.total_amount,
                DATE_FORMAT(p.added_at, '%Y-%m') AS month,
                
                s.id AS supplier_id,
                s.name AS supplier_name,
                s.email AS supplier_email

            FROM products p
            JOIN suppliers s ON p.supplier_id = s.id
            ORDER BY month DESC
        """;

        try (Connection conn = DBManager.getConnection(); PreparedStatement stmt = conn.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String month = rs.getString("month");

                Product product = new Product();
                product.setID(rs.getInt("product_id"));
                product.setName(rs.getString("product_name"));
                product.setCategory(rs.getString("category"));
                product.setQuantity(rs.getInt("quantity"));
                product.setPrice(rs.getDouble("price"));

                double totalAmount = rs.getDouble("total_amount");
                if (totalAmount == 0.0) {
                    totalAmount = product.getQuantity() * product.getPrice();
                }

                Supplier supplier = new Supplier();
                supplier.setID(rs.getInt("supplier_id"));
                supplier.setName(rs.getString("supplier_name"));
                supplier.setEmail(rs.getString("supplier_email"));

                ProductSupplierPair pair = new ProductSupplierPair(product, supplier);
                pair.setTotalAmount(totalAmount);

                monthlyMap.computeIfAbsent(month, k -> new ArrayList<>()).add(pair);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return monthlyMap;
    }

    // Generates a PDF report for a selected month
    public static void generateReportForMonth(String month, List<ProductSupplierPair> list) {
        try {
            String filename = "stock_report_" + month + "_"
                    + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy_HH-mm")) + ".pdf";

            PdfWriter writer = new PdfWriter(new FileOutputStream(filename));
            PdfDocument pdf = new PdfDocument(writer);
            Document doc = new Document(pdf, com.itextpdf.kernel.geom.PageSize.A4.rotate()); // Landscape

            // Top bar: Logo + title/date/admin info
            Table topTable = new Table(2);
            topTable.setWidth(UnitValue.createPercentValue(100));

            // Fix 1: Specify full class name for Image to avoid conflict
            URL logoUrl = ReportsManager.class.getResource("/Media/logo.png");
            if (logoUrl != null) {
                ImageData imageData = ImageDataFactory.create(logoUrl);
                com.itextpdf.layout.element.Image logo = new com.itextpdf.layout.element.Image(imageData)
                        .scaleToFit(120, 60);
                Cell logoCell = new Cell().add(logo).setBorder(Border.NO_BORDER);
                topTable.addCell(logoCell);
            } else {
                topTable.addCell(new Cell().add(new Paragraph("")).setBorder(Border.NO_BORDER));
            }

            // Fix 2: Use descriptive variable name to avoid shadowing
            Paragraph headerParagraph = new Paragraph("Stock Report - " + month)
                    .setFontSize(18)
                    .setBold()
                    .setTextAlignment(TextAlignment.RIGHT)
                    .add("\nDate: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm")))
                    .add("\nGenerated by: Admin");

            topTable.addCell(new Cell().add(headerParagraph).setBorder(Border.NO_BORDER));
            doc.add(topTable);

            doc.add(new Paragraph("\n")); // spacing

            // Table header
            Table table = new Table(6);
            table.setWidth(UnitValue.createPercentValue(100));
            table.addHeaderCell("Product");
            table.addHeaderCell("Category");
            table.addHeaderCell("Quantity");
            table.addHeaderCell("Price");
            table.addHeaderCell("Supplier");
            table.addHeaderCell("Total");

            for (ProductSupplierPair pair : list) {
                Product product = pair.getProduct();
                Supplier supplier = pair.getSupplier();

                table.addCell(product.getName());
                table.addCell(product.getCategory());
                table.addCell(String.valueOf(product.getQuantity()));
                table.addCell(String.format("%.2f", product.getPrice()));
                table.addCell(supplier.getName());
                table.addCell(String.format("%.2f", pair.getTotalAmount()));
            }

            doc.add(table);
            doc.close();

            System.out.println("✅ PDF created: " + filename);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void generateCSVReportForMonth(String month, List<ProductSupplierPair> list) {
        try {
            String filename = "stock_report_" + month + "_" +
                    LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy_HH-mm")) + ".csv";

            try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {

                // Optional: Add logo path and header info as comments
                writer.println("# Stock Report - " + month);
                writer.println("# Date: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm")));
                writer.println("# Generated by: Admin");
                writer.println();

                // Header
                writer.println("Product,Category,Quantity,Price,Supplier,Total");

                // Rows
                for (ProductSupplierPair pair : list) {
                    Product product = pair.getProduct();
                    Supplier supplier = pair.getSupplier();

                    String row = String.join(",",
                            escapeCsv(product.getName()),
                            escapeCsv(product.getCategory()),
                            String.valueOf(product.getQuantity()),
                            String.format("%.2f", product.getPrice()),
                            escapeCsv(supplier.getName()),
                            String.format("%.2f", pair.getTotalAmount())
                    );
                    writer.println(row);
                }

                System.out.println("✅ CSV created: " + filename);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private static String escapeCsv(String value) {
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            value = value.replace("\"", "\"\"");
            return "\"" + value + "\"";
        }
        return value;
    }
}
